package com.chitchat.matchmaking.logic;

import javafx.util.Pair;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

public class HungarianLogicTest {

    @Test
    public void testHungarianLogic() {
        /*
        A       B       C       D       E       F       G       H       I       J       K       L       M       N       O       P
       A        -0.12	-0.25	-0.31	-0.08	0.14	-1.73	-0.43	0.08	0.31	-0.18	-0.24	-1.75	-0.51	0.23	-0.17
       B                -0.50	-0.13	-0.39	0.04	-2.52	-0.77	-0.10	0.23	0.08	-0.54	-2.70	-0.97	0.05	0.00
       C                        -0.89	0.18	-0.44	-0.70	-0.06	0.20	-0.53	-0.57	0.05	-0.60	-0.04	0.30	-0.69
       D                                -0.88	-0.12	-3.80	-1.31	-0.38	0.10	-0.04	-1.02	-4.22	-1.70	-0.23	0.11
       E                                        -0.37	-0.65	0.20	-0.12	-0.56	-0.53	0.09	-0.64	-0.17	-0.20	-0.54
       F                                                -2.07	-0.66	-0.12	0.14	-0.05	-0.48	-2.24	-0.84	-0.02	0.05
       G                                                        -0.46	-1.15	-2.13	-2.52	-0.61	0.15	-0.36	-1.16	-3.50
       H                                                                -0.32	-0.77	-0.85	0.09	-0.35	0.04	-0.37	-1.07
       I                                                                        -0.27	-0.21	-0.21	-1.20	-0.40	0.08	-0.14
       J                                                                                0.11	-0.62	-2.40	-1.01	-0.20	0.31
       K                                                                                        -0.64	-2.77	-1.09	-0.10	0.11
       L                                                                                                -0.56	-0.08	-0.26	-0.75
       M                                                                                                        -0.30	-1.25	-3.75
       N                                                                                                                -0.46	-1.35
       O                                                                                                                        0.06
       P
         */
        double[] data = {
                0, -0.12, -0.25, -0.31, -0.08, 0.14, -1.73, -0.43, 0.08, 0.31, -0.18, -0.24, -1.75, -0.51, 0.23, -0.17,
                0, -0.50, -0.13, -0.39, 0.04, -2.52, -0.77, -0.10, 0.23, 0.08, -0.54, -2.70, -0.97, 0.05, 0.00,
                0, -0.89, 0.18, -0.44, -0.70, -0.06, 0.20, -0.53, -0.57, 0.05, -0.60, -0.04, 0.30, -0.69,
                0, -0.88, -0.12, -3.80, -1.31, -0.38, 0.10, -0.04, -1.02, -4.22, -1.70, -0.23, 0.11,
                0, -0.37, -0.65, 0.20, -0.12, -0.56, -0.53, 0.09, -0.64, -0.17, -0.20, -0.54,
                0, -2.07, -0.66, -0.12, 0.14, -0.05, -0.48, -2.24, -0.84, -0.02, 0.05,
                0, -0.46, -1.15, -2.13, -2.52, -0.61, 0.15, -0.36, -1.16, -3.50,
                0, -0.32, -0.77, -0.85, 0.09, -0.35, 0.04, -0.37, -1.07,
                0, -0.27, -0.21, -0.21, -1.20, -0.40, 0.08, -0.14,
                0, 0.11, -0.62, -2.40, -1.01, -0.20, 0.31,
                0, -0.64, -2.77, -1.09, -0.10, 0.11,
                0, -0.56, -0.08, -0.26, -0.75,
                0, -0.30, -1.25, -3.75,
                0, -0.46, -1.35,
                0, 0.06,
                0
        };

        int size = (int) Math.sqrt(2 * data.length);

        HungarianLogic hungarianLogic = new HungarianLogic(data);
        List<Pair<Integer, Integer>> result = hungarianLogic.findOptimalAssignment();

        for (Pair<Integer, Integer> colRow : result) {
            System.out.println("Col:"+(char)('A'+colRow.getKey())+" ,Row:"+(char)('A'+colRow.getValue()));
        }
    }
}
